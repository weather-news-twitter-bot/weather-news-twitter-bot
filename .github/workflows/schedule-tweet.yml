# .github/workflows/schedule-tweet.yml
name: Weather News Schedule Tweet Every 12 Hours
on:
  schedule:
    - cron: '0 0,12 * * *'  # 毎日0時と12時(UTC)
  workflow_dispatch:
  
jobs:
  tweet-schedule:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Debug environment variables
      run: |
        echo "Checking environment variables..."
        echo "TWITTER_API_KEY exists: $([[ -n "$TWITTER_API_KEY" ]] && echo "YES" || echo "NO")"
        echo "TWITTER_API_SECRET exists: $([[ -n "$TWITTER_API_SECRET" ]] && echo "YES" || echo "NO")"
        echo "TWITTER_ACCESS_TOKEN exists: $([[ -n "$TWITTER_ACCESS_TOKEN" ]] && echo "YES" || echo "NO")"
        echo "TWITTER_ACCESS_TOKEN_SECRET exists: $([[ -n "$TWITTER_ACCESS_TOKEN_SECRET" ]] && echo "YES" || echo "NO")"
      env:
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
    
    # オプション: 詳細デバッグ（必要に応じて）
    - name: Run authentication debug
      env:
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      run: |
        cd src
        python debug_twitter_auth.py
    
    - name: Post weather news schedule tweet
      env:
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      run: |
        cd src
        python weather_bot.py

---

# .github/workflows/test.yml
name: Test Bot Functions
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test schedule parsing (without posting)
      run: |
        cd src
        python -c "
        import requests
        from bs4 import BeautifulSoup
        import re
        from datetime import datetime
        
        def test_schedule_parsing():
            try:
                # 番組表データ取得のテスト
                main_url = 'https://minorin.jp/wnl/caster.cgi'
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
                }
                
                print('📡 番組表データを取得中...')
                response = requests.get(main_url, headers=headers, timeout=30)
                response.raise_for_status()
                
                print('✅ 番組表データ取得成功')
                
                # HTMLパース
                soup = BeautifulSoup(response.text, 'html.parser')
                rows = soup.find_all('tr')
                print(f'📊 {len(rows)}行のデータを解析中...')
                
                schedule_data = {}
                for row in rows:
                    cells = row.find_all('td')
                    if len(cells) >= 7:
                        date_text = cells[0].get_text(strip=True)
                        date_match = re.search(r'(\d{4}-\d{2}-\d{2})', date_text)
                        
                        if date_match:
                            current_date = date_match.group(1)
                            schedule_data[current_date] = True
                            print(f'📅 {current_date} の番組表を解析完了')
                
                if schedule_data:
                    print(f'✅ テスト成功: {len(schedule_data)}日分の番組表を取得')
                    
                    # 現在の番組情報テスト
                    now = datetime.now()
                    current_hour = now.hour
                    time_slots = [
                        ('05:00', 'モーニング'),
                        ('08:00', 'サンシャイン'), 
                        ('11:00', 'コーヒータイム'),
                        ('14:00', 'アフタヌーン'),
                        ('17:00', 'イブニング'),
                        ('20:00', 'ムーン')
                    ]
                    
                    closest_slot = time_slots[0]
                    for time_str, program in time_slots:
                        slot_hour = int(time_str.split(':')[0])
                        if abs(current_hour - slot_hour) <= 1:
                            closest_slot = (time_str, program)
                            break
                    
                    print(f'✅ 現在の番組: {closest_slot[0]} - {closest_slot[1]}')
                    return True
                else:
                    print('❌ 番組表の解析に失敗')
                    return False
                    
            except Exception as e:
                print(f'❌ テストエラー: {e}')
                return False
        
        # テスト実行
        if test_schedule_parsing():
            print('🎉 すべてのテストが成功しました!')
            exit(0)
        else:
            print('💥 テストが失敗しました')
            exit(1)
        "
